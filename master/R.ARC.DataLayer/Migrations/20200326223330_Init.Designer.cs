// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using R.ARC.Core.DataLayer.Context;

namespace R.ARC.Core.DataLayer.Migrations
{
    [DbContext(typeof(PostgreSContext))]
    [Migration("20200326223330_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.security_rights_id_seq", "'security_rights_id_seq', '', '1', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ApiResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnName("display_name")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("api_resources");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.AwsdmsDdlAudit", b =>
                {
                    b.Property<long>("CKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("c_key")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CDdlqry")
                        .HasColumnName("c_ddlqry")
                        .HasColumnType("text");

                    b.Property<string>("CName")
                        .HasColumnName("c_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("COid")
                        .HasColumnName("c_oid")
                        .HasColumnType("integer");

                    b.Property<string>("CSchema")
                        .HasColumnName("c_schema")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CTag")
                        .HasColumnName("c_tag")
                        .HasColumnType("character varying(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime?>("CTime")
                        .HasColumnName("c_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CTxn")
                        .HasColumnName("c_txn")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("CUser")
                        .HasColumnName("c_user")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("CKey")
                        .HasName("awsdms_ddl_audit_pkey");

                    b.ToTable("awsdms_ddl_audit");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.BackendConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AndroidOperatorUrl")
                        .HasColumnName("android_operator_url")
                        .HasColumnType("character varying");

                    b.Property<string>("AndroidOperatorVer")
                        .HasColumnName("android_operator_ver")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("AndroidServiceUrl")
                        .HasColumnName("android_service_url")
                        .HasColumnType("character varying");

                    b.Property<string>("AndroidServiceVer")
                        .HasColumnName("android_service_ver")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("AndroidVer")
                        .HasColumnName("android_ver")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("BgColor")
                        .HasColumnName("bg_color")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CurrentFwVersion")
                        .HasColumnName("current_fw_version")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("FineAmount")
                        .HasColumnName("fine_amount")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ImgUrl")
                        .HasColumnName("img_url")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IosOperatorUrl")
                        .HasColumnName("ios_operator_url")
                        .HasColumnType("character varying");

                    b.Property<string>("IosOperatorVer")
                        .HasColumnName("ios_operator_ver")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("IosServiceUrl")
                        .HasColumnName("ios_service_url")
                        .HasColumnType("character varying");

                    b.Property<string>("IosServiceVer")
                        .HasColumnName("ios_service_ver")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("IosVer")
                        .HasColumnName("ios_ver")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("ListAvailablesZoomLevel")
                        .HasColumnName("list_availables_zoom_level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxRideDebtValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("max_ride_debt_value")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("15");

                    b.Property<string>("MsgEn")
                        .HasColumnName("msg_en")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MsgTr")
                        .HasColumnName("msg_tr")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PbProvisionPrice")
                        .HasColumnName("pb_provision_price")
                        .HasColumnType("character varying");

                    b.Property<string>("PbRentPrice")
                        .HasColumnName("pb_rent_price")
                        .HasColumnType("character varying");

                    b.Property<string>("PricePerMinute")
                        .HasColumnName("price_per_minute")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ProvisionPrice")
                        .HasColumnName("provision_price")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("RateUsPeriod")
                        .HasColumnName("rate_us_period")
                        .HasColumnType("integer");

                    b.Property<int?>("RateUsRideCount")
                        .HasColumnName("rate_us_ride_count")
                        .HasColumnType("integer");

                    b.Property<int>("ReservationNotificationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reservation_notification_minutes")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("15");

                    b.Property<string>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("StartingPrice")
                        .HasColumnName("starting_price")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("backend_config");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.BackendErrors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessToken")
                        .HasColumnName("access_token")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("DateOccurred")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_occurred")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ErrorString")
                        .IsRequired()
                        .HasColumnName("error_string")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ip")
                        .HasColumnType("character varying(20)")
                        .HasDefaultValueSql("'0.0.0.0'::character varying")
                        .HasMaxLength(20);

                    b.Property<string>("UrlPath")
                        .IsRequired()
                        .HasColumnName("url_path")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("backend_errors");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Banks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("integer");

                    b.Property<string>("EftCode")
                        .HasColumnName("eft_code")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("banks");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Batteries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BodyVersionId")
                        .HasColumnName("body_version_id")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScooterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("SerialNo")
                        .HasColumnName("serial_no")
                        .HasColumnType("character varying");

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("StockCode")
                        .HasColumnName("stock_code")
                        .HasColumnType("character varying");

                    b.Property<int>("SwappableBatteryStatus")
                        .HasColumnName("swappable_battery_status")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("batteries");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.BatteryActionLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActionTime")
                        .HasColumnName("action_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BatteryId")
                        .HasColumnName("battery_id")
                        .HasColumnType("integer");

                    b.Property<int?>("FromScooterId")
                        .HasColumnName("from_scooter_id")
                        .HasColumnType("integer");

                    b.Property<int>("FromStatus")
                        .HasColumnName("from_status")
                        .HasColumnType("integer");

                    b.Property<int?>("GeofenceGroup")
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying");

                    b.Property<int?>("ToScooterId")
                        .HasColumnName("to_scooter_id")
                        .HasColumnType("integer");

                    b.Property<int>("ToStatus")
                        .HasColumnName("to_status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int?>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BatteryId")
                        .HasName("battery_action_logs_battery_id_idx");

                    b.HasIndex("ToScooterId")
                        .HasName("battery_action_logs_to_scooter_id_idx");

                    b.ToTable("battery_action_logs");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CallCenterUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnName("agent_id")
                        .HasColumnType("character varying");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("call_center_users");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Campaigns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnName("campaign_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("CampaignType")
                        .HasColumnName("campaign_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DetailFilePath")
                        .HasColumnName("detail_file_path")
                        .HasColumnType("character varying");

                    b.Property<int>("DiscountMaxUsableTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("discount_max_usable_time")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DiscountOn")
                        .HasColumnName("discount_on")
                        .HasColumnType("integer");

                    b.Property<int>("DiscountType")
                        .HasColumnName("discount_type")
                        .HasColumnType("integer");

                    b.Property<int>("DiscountValue")
                        .HasColumnName("discount_value")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("StartTime", "EndTime")
                        .HasName("campaigns_start_time_idx");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CampaignsCustomers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId")
                        .HasName("campaigns_customers_campaign_id_idx");

                    b.HasIndex("CustomerId")
                        .HasName("campaigns_customers_customer_id_idx");

                    b.ToTable("campaigns_customers");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CancellationRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsReported")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_reported")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnName("processed_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnName("processed_by")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderType")
                        .HasColumnName("provider_type")
                        .HasColumnType("integer");

                    b.Property<string>("RejectReason")
                        .HasColumnName("reject_reason")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ReportedAt")
                        .HasColumnName("reported_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestReason")
                        .HasColumnName("request_reason")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnName("requested_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RequestedBy")
                        .HasColumnName("requested_by")
                        .HasColumnType("integer");

                    b.Property<int>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RideId")
                        .HasName("cancellation_requests_ride_id_idx");

                    b.HasIndex("CustomerId", "Status")
                        .HasName("cancellation_requests_customer_id_idx");

                    b.ToTable("cancellation_requests");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CarDeliveries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssistantUserId")
                        .HasColumnName("assistant_user_id")
                        .HasColumnType("integer");

                    b.Property<int>("CarId")
                        .HasColumnName("car_id")
                        .HasColumnType("integer");

                    b.Property<int?>("DeliverKm")
                        .HasColumnName("deliver_km")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnName("delivered_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("DeliveringPhotos")
                        .HasColumnName("delivering_photos")
                        .HasColumnType("text[]");

                    b.Property<bool?>("HasIssue")
                        .HasColumnName("has_issue")
                        .HasColumnType("boolean");

                    b.Property<string>("Issue")
                        .HasColumnName("issue")
                        .HasColumnType("character varying");

                    b.Property<int?>("PickKm")
                        .HasColumnName("pick_km")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PickedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("picked_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string[]>("PickingPhotos")
                        .HasColumnName("picking_photos")
                        .HasColumnType("text[]");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("car_deliveries");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CardAddStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BankName")
                        .HasColumnName("bank_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BinNumber")
                        .HasColumnName("bin_number")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("CardAssociation")
                        .HasColumnName("card_association")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("CardFamilyName")
                        .HasColumnName("card_family_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CardType")
                        .HasColumnName("card_type")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("Force3ds")
                        .HasColumnName("force3ds")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Success")
                        .HasColumnName("success")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Ts")
                        .HasColumnName("ts")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VendorErrorCode")
                        .HasColumnName("vendor_error_code")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("VendorErrorGroup")
                        .HasColumnName("vendor_error_group")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VendorErrorMessage")
                        .HasColumnName("vendor_error_message")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("card_add_status");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Cars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Driver1")
                        .HasColumnName("driver_1")
                        .HasColumnType("integer");

                    b.Property<int?>("Driver2")
                        .HasColumnName("driver_2")
                        .HasColumnType("integer");

                    b.Property<int[]>("Drivers")
                        .HasColumnName("drivers")
                        .HasColumnType("integer[]");

                    b.Property<int?>("FenceGroup")
                        .HasColumnName("fence_group")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PhoneMac")
                        .HasColumnName("phone_mac")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Plate")
                        .HasColumnName("plate")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("cars_id_uindex");

                    b.HasIndex("Driver1", "Driver2")
                        .HasName("drivers");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ChargeStations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GeofenceId")
                        .HasColumnName("geofence_id")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("charge_stations_id_uindex");

                    b.ToTable("charge_stations");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Cities", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying");

                    b.Property<int?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("integer");

                    b.Property<string[]>("GeohashList")
                        .HasColumnName("geohash_list")
                        .HasColumnType("character varying[]");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("user_claims_id_uindex");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessTokenLifeTime")
                        .HasColumnName("access_token_life_time")
                        .HasColumnType("integer");

                    b.Property<string[]>("AllowedScopes")
                        .HasColumnName("allowed_scopes")
                        .HasColumnType("text[]");

                    b.Property<string>("ClientId")
                        .HasColumnName("client_id")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnName("secret")
                        .HasColumnType("text");

                    b.Property<string>("Uri")
                        .HasColumnName("uri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("IsoCode")
                        .HasColumnName("iso_code")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("countries_id_uindex");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Coupons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("BatchKey")
                        .HasColumnName("batch_key")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("CustomerExpiresAt")
                        .HasColumnName("customer_expires_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnName("expires_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnName("is_used")
                        .HasColumnType("boolean");

                    b.Property<long?>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnName("used_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("coupons_code_idx");

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CreditCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CcAssociation")
                        .HasColumnName("cc_association")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CcType")
                        .HasColumnName("cc_type")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("boolean");

                    b.Property<string>("Last4Digits")
                        .HasColumnName("last_4_digits")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("NameOnCard")
                        .HasColumnName("name_on_card")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PaymentServiceToken")
                        .HasColumnName("payment_service_token")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserToken")
                        .HasColumnName("user_token")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("\"CreditCards\"_\"ID\"_uindex");

                    b.HasIndex("CustomerId", "IsDefault", "IsActive")
                        .HasName("credit_cards_customer_id_idx");

                    b.ToTable("credit_cards");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerCallRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Calldate")
                        .HasColumnName("calldate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Dst")
                        .HasColumnName("dst")
                        .HasColumnType("bigint");

                    b.Property<int?>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("integer");

                    b.Property<string>("Src")
                        .HasColumnName("src")
                        .HasColumnType("character varying");

                    b.Property<string>("Surname")
                        .HasColumnName("surname")
                        .HasColumnType("character varying");

                    b.Property<string>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("character varying");

                    b.Property<string>("Uniqueid")
                        .HasColumnName("uniqueid")
                        .HasColumnType("character varying");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("customer_call_records");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerCheckmobiPins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CheckmobiId")
                        .HasColumnName("checkmobi_id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVerified")
                        .HasColumnName("is_verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("customer_checkmobi_pins");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerDemands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Ts")
                        .HasColumnName("ts")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Ts")
                        .HasName("customer_demands_ts_idx");

                    b.ToTable("customer_demands");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerPhoneNumberHolder", b =>
                {
                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<string>("TempPhoneCountryCode")
                        .HasColumnName("temp_phone_country_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TempPhoneNumber")
                        .HasColumnName("temp_phone_number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.ToTable("customer_phone_number_holder");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerPopups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnName("is_read")
                        .HasColumnType("boolean");

                    b.Property<int>("PopupId")
                        .HasColumnName("popup_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnName("read_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("customer_popups_id_uindex");

                    b.ToTable("customer_popups");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerReservationDebts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CardId")
                        .HasColumnName("card_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSuccess")
                        .HasColumnName("is_success")
                        .HasColumnType("boolean");

                    b.Property<int>("ReservationId")
                        .HasColumnName("reservation_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "ReservationId")
                        .HasName("customer_reservation_debts_customer_id_idx");

                    b.ToTable("customer_reservation_debts");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerRideDebts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("CardId")
                        .HasColumnName("card_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSuccess")
                        .HasColumnName("is_success")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentToken")
                        .HasColumnName("payment_token")
                        .HasColumnType("character varying");

                    b.Property<int>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionToken")
                        .HasColumnName("transaction_token")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "RideId")
                        .HasName("customer_ride_debts_customer_id_idx");

                    b.ToTable("customer_ride_debts");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerScooterRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnName("latitude")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnName("longitude")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Ts")
                        .HasColumnName("ts")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("customer_scooter_requests_customer_id_idx");

                    b.HasIndex("Ts")
                        .HasName("customer_scooter_requests_ts_idx");

                    b.ToTable("customer_scooter_requests");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.CustomerSentNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnName("is_read")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnName("read_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("customer_sent_notifications_id_uindex");

                    b.HasIndex("CustomerId", "IsRead")
                        .HasName("customer_sent_notifications_customer_id_idx");

                    b.ToTable("customer_sent_notifications");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessToken")
                        .HasColumnName("access_token")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnName("birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("FreeTier")
                        .HasColumnName("free_tier")
                        .HasColumnType("boolean");

                    b.Property<string>("IdPhoto")
                        .HasColumnName("id_photo")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsKvkkRead")
                        .HasColumnName("is_kvkk_read")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("KvkkDate")
                        .HasColumnName("kvkk_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime>("LastSignedinAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_signedin_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobile_phone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobilePhoneCountryCode")
                        .HasColumnName("mobile_phone_country_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("OneSignalId")
                        .HasColumnName("one_signal_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("SkipVerification")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("skip_verification")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("SmsCode")
                        .HasColumnName("sms_code")
                        .HasColumnType("character(4)")
                        .IsFixedLength(true)
                        .HasMaxLength(4);

                    b.Property<string>("Tckn")
                        .HasColumnName("tckn")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<bool?>("TcknValidated")
                        .HasColumnName("tckn_validated")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccessToken")
                        .HasName("customers_access_token_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("\"Customers\"_\"ID\"_uindex");

                    b.HasIndex("Tckn")
                        .HasName("customers_tckn_idx");

                    b.HasIndex("Id", "FreeTier")
                        .HasName("customers_id_idx");

                    b.HasIndex("MobilePhone", "Name")
                        .HasName("customers_mobile_phone_idx");

                    b.HasIndex("MobilePhoneCountryCode", "MobilePhone")
                        .HasName("customers_mobile_phone_country_code_idx");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.DailyCurrencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(now())::date");

                    b.Property<decimal>("Value")
                        .HasColumnName("value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("daily_currencies");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Decisions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("decisions");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.DeviceCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Districts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("District")
                        .HasColumnName("district")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("expenses_id_uindex");

                    b.ToTable("expenses");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GeofenceBorderPoints", b =>
                {
                    b.Property<int?>("FenceId")
                        .HasColumnName("fence_id")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .HasColumnName("hash")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("PointOrder")
                        .HasColumnName("point_order")
                        .HasColumnType("integer");

                    b.HasIndex("Hash")
                        .HasName("fence_id_idx");

                    b.ToTable("geofence_border_points");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GeofenceKeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FenceId")
                        .HasColumnName("fence_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<string>("PointIndex")
                        .HasColumnName("point_index")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("geofence_keys");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GeofenceOfficePoints", b =>
                {
                    b.Property<int>("GeofenceId")
                        .HasColumnName("geofence_id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PlaceName")
                        .HasColumnName("place_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string[]>("Points")
                        .HasColumnName("points")
                        .HasColumnType("character varying(10)[]");

                    b.ToTable("geofence_office_points");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GeofenceParkBorders", b =>
                {
                    b.Property<int>("GeofenceGroup")
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnName("lat")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Lon")
                        .IsRequired()
                        .HasColumnName("lon")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("PointIndex")
                        .IsRequired()
                        .HasColumnName("point_index")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PointOrder")
                        .HasColumnName("point_order")
                        .HasColumnType("integer");

                    b.ToTable("geofence_park_borders");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GeofenceParkPoints", b =>
                {
                    b.Property<int>("GeofenceGroup")
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnName("lat")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Lon")
                        .IsRequired()
                        .HasColumnName("lon")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.ToTable("geofence_park_points");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GeofencePoints", b =>
                {
                    b.Property<int?>("FenceId")
                        .HasColumnName("fence_id")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .HasColumnName("hash")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasIndex("Hash")
                        .HasName("hash_idx");

                    b.ToTable("geofence_points");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GeofenceRegionPoints", b =>
                {
                    b.Property<int?>("FenceId")
                        .HasColumnName("fence_id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MapData")
                        .HasColumnName("map_data")
                        .HasColumnType("text");

                    b.ToTable("geofence_region_points");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GeofenceRestrictedPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FenceGroup")
                        .HasColumnName("fence_group")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<string>("Points")
                        .HasColumnName("points")
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.ToTable("geofence_restricted_points");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Geofences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AlwaysOn")
                        .HasColumnName("always_on")
                        .HasColumnType("boolean");

                    b.Property<string>("Center")
                        .HasColumnName("center")
                        .HasColumnType("character(7)")
                        .IsFixedLength(true)
                        .HasMaxLength(7);

                    b.Property<string>("CityName")
                        .HasColumnName("city_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DiscountAmount")
                        .HasColumnName("discount_amount")
                        .HasColumnType("integer");

                    b.Property<bool?>("EnableReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("enable_reservation")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("EnableStartPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("enable_start_price")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("GeofenceGroup")
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVisible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_visible")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("MsgEn")
                        .HasColumnName("msg_en")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MsgTr")
                        .HasColumnName("msg_tr")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("RequireCreditCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("require_credit_card")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("TaxApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tax_applied")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("18");

                    b.HasKey("Id");

                    b.ToTable("geofences");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.GovernmentUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("city")
                        .HasColumnType("character varying")
                        .HasDefaultValueSql("100");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("role")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("government_users_id_uindex");

                    b.ToTable("government_users");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.InventoryCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnName("category_name")
                        .HasColumnType("character varying");

                    b.Property<int>("ModelId")
                        .HasColumnName("model_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("inventory_categories");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.InventoryComponentCounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ComponentStockCode")
                        .HasColumnName("component_stock_code")
                        .HasColumnType("character varying");

                    b.Property<int?>("StockCount")
                        .HasColumnName("stock_count")
                        .HasColumnType("integer");

                    b.Property<int?>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("inventory_component_counts");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.InventoryComponents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ComponentName")
                        .HasColumnName("component_name")
                        .HasColumnType("character varying");

                    b.Property<string>("ComponentStockCode")
                        .HasColumnName("component_stock_code")
                        .HasColumnType("character varying");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasColumnName("manufacturer_part_number")
                        .HasColumnType("character varying");

                    b.Property<int?>("PartId")
                        .HasColumnName("part_id")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityPerScooter")
                        .HasColumnName("quantity_per_scooter")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("inventory_components");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.InventoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BomVersion")
                        .HasColumnName("bom_version")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<string>("ModelName")
                        .HasColumnName("model_name")
                        .HasColumnType("character varying");

                    b.Property<int?>("ScooterBodyVersionId")
                        .HasColumnName("scooter_body_version_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("inventory_model");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.InventoryPartCounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AssetKey")
                        .HasColumnName("asset_key")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("PartStockCode")
                        .HasColumnName("part_stock_code")
                        .HasColumnType("character varying");

                    b.Property<int?>("StockCount")
                        .HasColumnName("stock_count")
                        .HasColumnType("integer");

                    b.Property<int?>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("inventory_part_counts");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.InventoryParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AssetKey")
                        .HasColumnName("asset_key")
                        .HasColumnType("character varying");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("integer");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasColumnName("manufacturer_part_number")
                        .HasColumnType("character varying");

                    b.Property<string>("PartName")
                        .HasColumnName("part_name")
                        .HasColumnType("character varying");

                    b.Property<string>("StockCode")
                        .HasColumnName("stock_code")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("inventory_parts");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.InventoryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("inventory_status");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.InvestorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("investor_data");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Invoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnName("cancelled_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("ChargedPrice")
                        .HasColumnName("charged_price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InvoiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("invoice_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool?>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_cancelled")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsProcessed")
                        .HasColumnName("is_processed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PdfReady")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pdf_ready")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnName("processed_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ProviderId")
                        .HasColumnName("provider_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ProviderType")
                        .HasColumnName("provider_type")
                        .HasColumnType("character varying");

                    b.Property<string>("RealInvoiceId")
                        .HasColumnName("real_invoice_id")
                        .HasColumnType("character varying");

                    b.Property<string>("RefId")
                        .HasColumnName("ref_id")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceDate")
                        .HasName("invoices_invoice_date_idx");

                    b.HasIndex("ProviderType")
                        .HasName("invoices_provider_type_idx");

                    b.HasIndex("RefId")
                        .HasName("invoices_ref_id_idx");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.IotBoxInventoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<int>("IotBoxId")
                        .HasColumnName("iot_box_id")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<int>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("iot_box_inventory_history");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.IotBoxes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BodyVersionId")
                        .HasColumnName("body_version_id")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScooterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("SerialNo")
                        .HasColumnName("serial_no")
                        .HasColumnType("character varying");

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("StockCode")
                        .HasColumnName("stock_code")
                        .HasColumnType("character varying");

                    b.Property<int>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("iot_boxes");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.IotLockInventoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<int>("IotLockId")
                        .HasColumnName("iot_lock_id")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<int>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("iot_lock_inventory_history");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.IotLocks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BodyVersionId")
                        .HasColumnName("body_version_id")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScooterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("SerialNo")
                        .HasColumnName("serial_no")
                        .HasColumnType("character varying");

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("StockCode")
                        .HasColumnName("stock_code")
                        .HasColumnType("character varying");

                    b.Property<int>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("iot_locks");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.IssueSolutionTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("issue_solution_types");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.IssueTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("issue_types_id_uindex");

                    b.ToTable("issue_types");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Issues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CallDuration")
                        .HasColumnName("call_duration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CaseEndTime")
                        .HasColumnName("case_end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CaseStartTime")
                        .HasColumnName("case_start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("character varying(750)")
                        .HasMaxLength(750);

                    b.Property<string>("CosmicRoomNote")
                        .HasColumnName("cosmic_room_note")
                        .HasColumnType("character varying");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<int?>("FinalDecisionId")
                        .HasColumnName("final_decision_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FixedDate")
                        .HasColumnName("fixed_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GeofenceGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("10");

                    b.Property<bool?>("IsFixed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_fixed")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<int?>("IssueTypeId")
                        .HasColumnName("issue_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("OriginalIssueId")
                        .HasColumnName("original_issue_id")
                        .HasColumnType("integer");

                    b.Property<string>("OtherText")
                        .HasColumnName("other_text")
                        .HasColumnType("character varying");

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PreviousIssueId")
                        .HasColumnName("previous_issue_id")
                        .HasColumnType("integer");

                    b.Property<int?>("Priority")
                        .HasColumnName("priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RedialTime")
                        .HasColumnName("redial_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnName("report_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SolutionDetail")
                        .HasColumnName("solution_detail")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("issues_id_uindex");

                    b.ToTable("issues");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.KpiReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("AvgRideTime")
                        .HasColumnName("avg_ride_time")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<decimal?>("DiscountsDollar")
                        .HasColumnName("discounts_dollar")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("DiscountsPercent")
                        .HasColumnName("discounts_percent")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("DiscountsTl")
                        .HasColumnName("discounts_tl")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("DollarTl")
                        .HasColumnName("dollar_tl")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("GeofenceGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("10");

                    b.Property<decimal?>("GrossRevenueDollar")
                        .HasColumnName("gross_revenue_dollar")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("GrossRevenuePerRideDollar")
                        .HasColumnName("gross_revenue_per_ride_dollar")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("GrossRevenuePerRideTl")
                        .HasColumnName("gross_revenue_per_ride_tl")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("GrossRevenuePerScooterDollar")
                        .HasColumnName("gross_revenue_per_scooter_dollar")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("GrossRevenuePerScooterTl")
                        .HasColumnName("gross_revenue_per_scooter_tl")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("GrossRevenueTl")
                        .HasColumnName("gross_revenue_tl")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("GrossScootersAvailableHours")
                        .HasColumnName("gross_scooters_available_hours")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("KmPerRide")
                        .HasColumnName("km_per_ride")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("NetRevenueDollar")
                        .HasColumnName("net_revenue_dollar")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("NetRevenuePerRideDollar")
                        .HasColumnName("net_revenue_per_ride_dollar")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("NetRevenuePerRideTl")
                        .HasColumnName("net_revenue_per_ride_tl")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("NetRevenuePerScooterDollar")
                        .HasColumnName("net_revenue_per_scooter_dollar")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("NetRevenuePerScooterTl")
                        .HasColumnName("net_revenue_per_scooter_tl")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("NetRevenueTl")
                        .HasColumnName("net_revenue_tl")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("NetScooterHoursAvailable")
                        .HasColumnName("net_scooter_hours_available")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("OperationalHours")
                        .HasColumnName("operational_hours")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("Registrations")
                        .HasColumnName("registrations")
                        .HasColumnType("integer");

                    b.Property<int>("RepairCount")
                        .HasColumnName("repair_count")
                        .HasColumnType("integer");

                    b.Property<decimal?>("RidesPerScooter")
                        .HasColumnName("rides_per_scooter")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("RidesPerScooterPerHour")
                        .HasColumnName("rides_per_scooter_per_hour")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("RidesPerUniqueUser")
                        .HasColumnName("rides_per_unique_user")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("RollingWeeklyUniqueRiders")
                        .HasColumnName("rolling_weekly_unique_riders")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ScooterAvailabilityPercent")
                        .HasColumnName("scooter_availability_percent")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScooterRecovered")
                        .HasColumnName("scooter_recovered")
                        .HasColumnType("integer");

                    b.Property<int?>("ScootersDamagedNotRecoverable")
                        .HasColumnName("scooters_damaged_not_recoverable")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ScootersDamagedNotRecoverablePercent")
                        .HasColumnName("scooters_damaged_not_recoverable_percent")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScootersDamagedRecoverable")
                        .HasColumnName("scooters_damaged_recoverable")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ScootersDamagedRecoverablePercent")
                        .HasColumnName("scooters_damaged_recoverable_percent")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScootersDeployed")
                        .HasColumnName("scooters_deployed")
                        .HasColumnType("integer");

                    b.Property<int?>("ScootersLost")
                        .HasColumnName("scooters_lost")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ScootersLostPercent")
                        .HasColumnName("scooters_lost_percent")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("ShareOfRepeatUsersAmongUniqueUsers")
                        .HasColumnName("share_of_repeat_users_among_unique_users")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("TotalRegistrations")
                        .HasColumnName("total_registrations")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalRegistrationsUniqueUsersCompletedRidesConversion")
                        .HasColumnName("total_registrations_unique_users_completed_rides_conversion")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("TotalRideKm")
                        .HasColumnName("total_ride_km")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("TotalRideMinutes")
                        .HasColumnName("total_ride_minutes")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalRides")
                        .HasColumnName("total_rides")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalUniqueUsersWhoCompletedRides")
                        .HasColumnName("total_unique_users_who_completed_rides")
                        .HasColumnType("integer");

                    b.Property<int?>("UniqueUsersWhoCompletedRides")
                        .HasColumnName("unique_users_who_completed_rides")
                        .HasColumnType("integer");

                    b.Property<decimal?>("UnrecoverableRatePercent")
                        .HasColumnName("unrecoverable_rate_percent")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("kpi_reports_id_uindex");

                    b.ToTable("kpi_reports");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.KpiValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("AvgAvailableSeconds")
                        .HasColumnName("avg_available_seconds")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("AvgRideSeconds")
                        .HasColumnName("avg_ride_seconds")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("FenceGroup")
                        .HasColumnName("fence_group")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("KpiDate")
                        .HasColumnName("kpi_date")
                        .HasColumnType("date");

                    b.Property<int?>("RideCount")
                        .HasColumnName("ride_count")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalCount")
                        .HasColumnName("total_count")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalDeployed")
                        .HasColumnName("total_deployed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KpiDate")
                        .HasName("kpi_values_kpi_date_idx");

                    b.ToTable("kpi_values");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.MartiHealthChecks", b =>
                {
                    b.Property<string>("CcStatus")
                        .HasColumnName("cc_status")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("FotaStatus")
                        .HasColumnName("fota_status")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LambdaStatus")
                        .HasColumnName("lambda_status")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("MqttHelperStatus")
                        .HasColumnName("mqtt_helper_status")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("MqttStatus")
                        .HasColumnName("mqtt_status")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("Ts")
                        .HasColumnName("ts")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("Id")
                        .HasName("marti_health_checks_id_idx");

                    b.ToTable("marti_health_checks");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.MotorDriverInventoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<int>("MotorDriverId")
                        .HasColumnName("motor_driver_id")
                        .HasColumnType("integer");

                    b.Property<int>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("motor_driver_inventory_history");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.MotorDrivers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BodyVersionId")
                        .HasColumnName("body_version_id")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScooterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("SerialNo")
                        .HasColumnName("serial_no")
                        .HasColumnType("character varying");

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("StockCode")
                        .HasColumnName("stock_code")
                        .HasColumnType("character varying");

                    b.Property<int>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("motor_drivers");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.MotorInventoryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<int>("MotorId")
                        .HasColumnName("motor_id")
                        .HasColumnType("integer");

                    b.Property<int>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("motor_inventory_history");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Motors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BodyVersionId")
                        .HasColumnName("body_version_id")
                        .HasColumnType("integer");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScooterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("SerialNo")
                        .HasColumnName("serial_no")
                        .HasColumnType("character varying");

                    b.Property<int?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("StockCode")
                        .HasColumnName("stock_code")
                        .HasColumnType("character varying");

                    b.Property<int>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("motors");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.OperatingHours", b =>
                {
                    b.Property<double?>("Trunc")
                        .HasColumnName("trunc")
                        .HasColumnType("double precision");

                    b.ToTable("operating_hours");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.OperatingHoursMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Bgcolor")
                        .HasColumnName("bgcolor")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("MessageEn")
                        .HasColumnName("message_en")
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("MessageTr")
                        .HasColumnName("message_tr")
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("operating_hours_messages_id_uindex");

                    b.ToTable("operating_hours_messages");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.OperationWorkOrderStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<int?>("OrderNo")
                        .HasColumnName("order_no")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("operation_work_order_statuses");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.OperationWorkOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnName("completed_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("issued_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("IssuedBy")
                        .HasColumnName("issued_by")
                        .HasColumnType("integer");

                    b.Property<int[]>("Regions")
                        .HasColumnName("regions")
                        .HasColumnType("integer[]");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Status", "UserId")
                        .HasName("operation_work_orders_status_idx");

                    b.ToTable("operation_work_orders");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.OperatorActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("ActionTime")
                        .HasColumnName("action_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CarId")
                        .HasColumnName("car_id")
                        .HasColumnType("integer");

                    b.Property<int?>("FromStatusId")
                        .HasColumnName("from_status_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsValidated")
                        .HasColumnName("is_validated")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RepairRecordId")
                        .HasColumnName("repair_record_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ToStatusId")
                        .HasColumnName("to_status_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidatedBy")
                        .HasColumnName("validated_by")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ValidationDate")
                        .HasColumnName("validation_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnName("work_order_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .HasName("operator_action_log_car_id_idx");

                    b.HasIndex("ScooterId")
                        .HasName("operator_action_log_scooter_id_idx");

                    b.HasIndex("ToStatusId")
                        .HasName("operator_action_log_to_status_id_idx");

                    b.HasIndex("WorkOrderId")
                        .HasName("operator_action_log_work_order_id_idx");

                    b.HasIndex("ActionTime", "CarId")
                        .HasName("operator_action_log_action_time_idx");

                    b.HasIndex("UserId", "ScooterId")
                        .HasName("operator_action_log_user_id_idx");

                    b.ToTable("operator_action_log");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.OperatorLocationLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("operator_location_logs_id_uindex");

                    b.ToTable("operator_location_logs");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.OutOfOrderRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ApprovedBy")
                        .HasColumnName("approved_by")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedNote")
                        .HasColumnName("created_note")
                        .HasColumnType("character varying");

                    b.Property<bool?>("IsApproved")
                        .HasColumnName("is_approved")
                        .HasColumnType("boolean");

                    b.Property<int>("RepairId")
                        .HasColumnName("repair_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("out_of_order_request");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.PbLocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying");

                    b.Property<int?>("BankId")
                        .HasColumnName("bank_id")
                        .HasColumnType("integer");

                    b.Property<int?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("integer");

                    b.Property<string[]>("ClockList")
                        .HasColumnName("clock_list")
                        .HasColumnType("character varying[]");

                    b.Property<string>("CompanyTitle")
                        .HasColumnName("company_title")
                        .HasColumnType("character varying");

                    b.Property<string>("Iban")
                        .HasColumnName("iban")
                        .HasColumnType("character varying");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("IsEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<string>("OfficialInvoiceAddress")
                        .HasColumnName("official_invoice_address")
                        .HasColumnType("character varying");

                    b.Property<string[]>("Photos")
                        .HasColumnName("photos")
                        .HasColumnType("character varying[]");

                    b.Property<string>("ResponsibleEmail")
                        .HasColumnName("responsible_email")
                        .HasColumnType("character varying");

                    b.Property<string>("ResponsibleName")
                        .HasColumnName("responsible_name")
                        .HasColumnType("character varying");

                    b.Property<string>("ResponsiblePhone")
                        .HasColumnName("responsible_phone")
                        .HasColumnType("character varying");

                    b.Property<string>("TaxNumber")
                        .HasColumnName("tax_number")
                        .HasColumnType("character varying");

                    b.Property<string>("TaxOfficeId")
                        .HasColumnName("tax_office_id")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("pb_locations");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.PbPowerbanks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BatteryLevel")
                        .HasColumnName("battery_level")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrentSlot")
                        .HasColumnName("current_slot")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsInside")
                        .HasColumnName("is_inside")
                        .HasColumnType("boolean");

                    b.Property<int>("LastRentId")
                        .HasColumnName("last_rent_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastSeenAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_seen_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastSeenStationId")
                        .HasColumnName("last_seen_station_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("NeedRepair")
                        .HasColumnName("need_repair")
                        .HasColumnType("boolean");

                    b.Property<decimal>("RecurringPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("recurring_price")
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValueSql("5");

                    b.Property<string>("RepairNote")
                        .HasColumnName("repair_note")
                        .HasColumnType("character varying");

                    b.Property<decimal>("StartingPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("starting_price")
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValueSql("30");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("15");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("pb_powerbanks_code_idx");

                    b.ToTable("pb_powerbanks");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.PbRentReviewCategories", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<bool>("ShowNote")
                        .HasColumnName("show_note")
                        .HasColumnType("boolean");

                    b.Property<int[]>("Stars")
                        .HasColumnName("stars")
                        .HasColumnType("integer[]");

                    b.Property<int>("Value")
                        .HasColumnName("value")
                        .HasColumnType("integer");

                    b.HasKey("Key")
                        .HasName("pb_rent_review_categories_pk");

                    b.ToTable("pb_rent_review_categories");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.PbRentReviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("PointsGiven")
                        .HasColumnName("points_given")
                        .HasColumnType("integer");

                    b.Property<int>("RentId")
                        .HasColumnName("rent_id")
                        .HasColumnType("integer");

                    b.Property<string>("Review")
                        .HasColumnName("review")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int[]>("TagList")
                        .HasColumnName("tag_list")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("pb_rent_reviews");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.PbRents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("ActualPrice")
                        .HasColumnName("actual_price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("AdditionalPaymentToken")
                        .HasColumnName("additional_payment_token")
                        .HasColumnType("character varying");

                    b.Property<string>("AdditionalTransactionToken")
                        .HasColumnName("additional_transaction_token")
                        .HasColumnType("character varying");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnName("approved_by")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnName("approved_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("ChargedPrice")
                        .HasColumnName("charged_price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<long?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FromSlot")
                        .HasColumnName("from_slot")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsApproved")
                        .HasColumnName("is_approved")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSuccess")
                        .HasColumnName("is_success")
                        .HasColumnType("boolean");

                    b.Property<int?>("PowerbankId")
                        .HasColumnName("powerbank_id")
                        .HasColumnType("integer");

                    b.Property<string>("ProvisionToken")
                        .HasColumnName("provision_token")
                        .HasColumnType("character varying");

                    b.Property<string>("ProvisionTransactionToken")
                        .HasColumnName("provision_transaction_token")
                        .HasColumnType("character varying");

                    b.Property<int?>("ReturnStationId")
                        .HasColumnName("return_station_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("StationId")
                        .HasColumnName("station_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ToSlot")
                        .HasColumnName("to_slot")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnName("total_price")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("IsSuccess")
                        .HasName("pb_rents_is_success_idx");

                    b.HasIndex("PowerbankId")
                        .HasName("pb_rents_powerbank_id_idx");

                    b.HasIndex("StartTime")
                        .HasName("pb_rents_start_time_idx");

                    b.HasIndex("StationId")
                        .HasName("pb_rents_station_id_idx");

                    b.ToTable("pb_rents");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.PbStations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnName("last_seen_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("pb_stations_code_idx");

                    b.ToTable("pb_stations");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.PersistedGrants", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Popups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("path")
                        .HasColumnType("character varying");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("popups");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FenceId")
                        .HasColumnName("fence_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("MapData")
                        .HasColumnName("map_data")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("regions_id_uindex");

                    b.ToTable("regions");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RepairActionLogReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("repair_action_log_reasons");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RepairActionLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActionTime")
                        .HasColumnName("action_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ActionType")
                        .HasColumnName("action_type")
                        .HasColumnType("integer");

                    b.Property<int?>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("integer");

                    b.Property<int>("RepairRecordId")
                        .HasColumnName("repair_record_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionTime")
                        .HasName("repair_action_logs_action_time_idx");

                    b.HasIndex("RepairRecordId")
                        .HasName("repair_action_logs_repair_record_id_idx");

                    b.HasIndex("UserId")
                        .HasName("repair_action_logs_user_id_idx");

                    b.ToTable("repair_action_logs");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RepairControlStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("id")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("character varying");

                    b.ToTable("repair_control_status");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RepairResultMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BodyVersion")
                        .HasColumnName("body_version")
                        .HasColumnType("integer");

                    b.Property<bool>("HasQuantity")
                        .HasColumnName("has_quantity")
                        .HasColumnType("boolean")
                        .HasComment("Ekrandan Miktar girilip girilmeyeceğini kontrol eder");

                    b.Property<bool>("HasStockEffect")
                        .HasColumnName("has_stock_effect")
                        .HasColumnType("boolean")
                        .HasComment("Stok miktarından düşülüp düşümeyeceğini kontrol eder / stock_code ve is_part girilmiş has_quantity true olmalı");

                    b.Property<bool?>("IsPart")
                        .HasColumnName("is_part")
                        .HasColumnType("boolean")
                        .HasComment("Stok tarafından düşerken hangi tabloya gideceğini belirler / Inventory_Part_Stock_Count - Inventory_Component_Stock_Count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying")
                        .HasComment("Stoktaki isimle eşleştirilmedi / Stoktan eritilmeyecek materyeller bulunduğundan / UYapıştırıcı kablo vs ");

                    b.Property<int>("ResultCode")
                        .HasColumnName("result_code")
                        .HasColumnType("integer")
                        .HasComment("scooter_repair_result_category de vbulunan Result kod alanıyla eşleşmede kullanılır");

                    b.Property<string>("StockCode")
                        .HasColumnName("stock_code")
                        .HasColumnType("character varying")
                        .HasComment("Stok tarafından düşerken ilgili tabloya gidildikten sonra hangi stoktan düşüleceğini belirler (Id gibi tekildir)");

                    b.HasKey("Id");

                    b.ToTable("repair_result_materials");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RepairResultMaterialsUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NewSerialNo")
                        .HasColumnName("new_serial_no")
                        .HasColumnType("character varying");

                    b.Property<string>("OldSerialNo")
                        .HasColumnName("old_serial_no")
                        .HasColumnType("character varying");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("integer");

                    b.Property<int>("RepairId")
                        .HasColumnName("repair_id")
                        .HasColumnType("integer");

                    b.Property<int>("ResultMaterialId")
                        .HasColumnName("result_material_id")
                        .HasColumnType("integer")
                        .HasComment("repair_result_material tablosundaki id");

                    b.HasKey("Id");

                    b.ToTable("repair_result_materials_usage");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ReservationPaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Order")
                        .HasColumnName("order_")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("reservation_payment_status");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ReservationRefunds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("ConversationId")
                        .HasColumnName("conversation_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool?>("IsSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_success")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("PaymentId")
                        .HasColumnName("payment_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnName("processed_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ReservationId")
                        .HasColumnName("reservation_id")
                        .HasColumnType("integer");

                    b.Property<string>("Response")
                        .HasColumnName("response")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("reservation_refunds");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Reservations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("CardId")
                        .HasColumnName("card_id")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentServicePaymentToken")
                        .HasColumnName("payment_service_payment_token")
                        .HasColumnType("character varying");

                    b.Property<string>("PaymentServiceTransactionId")
                        .HasColumnName("payment_service_transaction_id")
                        .HasColumnType("character varying");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnName("payment_status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnName("payment_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("reservations_customer_id_idx");

                    b.HasIndex("ScooterId")
                        .HasName("reservations_scooter_id_idx");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideAccidents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AccidentDate")
                        .HasColumnName("accident_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AccidentReason")
                        .HasColumnName("accident_reason")
                        .HasColumnType("integer");

                    b.Property<int>("AccidentType")
                        .HasColumnName("accident_type")
                        .HasColumnType("integer");

                    b.Property<string>("AccidentTypeNote")
                        .IsRequired()
                        .HasColumnName("accident_type_note")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<bool>("ExternalSourcesExist")
                        .HasColumnName("external_sources_exist")
                        .HasColumnType("boolean");

                    b.Property<int?>("ResponseUserId")
                        .HasColumnName("response_user_id")
                        .HasColumnType("integer");

                    b.Property<int>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.Property<bool>("SeenOnMedia")
                        .HasColumnName("seen_on_media")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ride_accidents");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideFines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("integer");

                    b.Property<int?>("CardId")
                        .HasColumnName("card_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("ride_fees_id_uindex");

                    b.ToTable("ride_fines");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideRefundRequestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("character varying");

                    b.Property<int?>("RefundId")
                        .HasColumnName("refund_id")
                        .HasColumnType("integer");

                    b.Property<int>("RequestId")
                        .HasColumnName("request_id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RefundId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("ride_refund_request_history");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideRefundRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasColumnType("character varying");

                    b.Property<int>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.Property<int>("Source")
                        .HasColumnName("source")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ride_refund_requests");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideRefunds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("ConversationId")
                        .HasColumnName("conversation_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool?>("IsSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_success")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("PaymentId")
                        .HasColumnName("payment_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnName("processed_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Response")
                        .HasColumnName("response")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RideId")
                        .HasName("ride_refunds_ride_id_idx");

                    b.ToTable("ride_refunds");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideRejectOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsBlackListAdded")
                        .HasColumnName("is_black_list_added")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNotified")
                        .HasColumnName("is_notified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPenaltyFeeAdded")
                        .HasColumnName("is_penalty_fee_added")
                        .HasColumnType("boolean");

                    b.Property<int?>("NotificationId")
                        .HasColumnName("notification_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PenaltyFee")
                        .HasColumnName("penalty_fee")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RideId")
                        .HasName("ride_reject_operation_ride_id_idx");

                    b.ToTable("ride_reject_operation");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideRejectReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MessageEn")
                        .HasColumnName("message_en")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MessageTr")
                        .HasColumnName("message_tr")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("ride_reject_reasons_id_uindex");

                    b.ToTable("ride_reject_reasons");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideReviewCategories", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<bool>("ShowNote")
                        .HasColumnName("show_note")
                        .HasColumnType("boolean");

                    b.Property<int[]>("Stars")
                        .HasColumnName("stars")
                        .HasColumnType("integer[]");

                    b.Property<int>("Value")
                        .HasColumnName("value")
                        .HasColumnType("integer");

                    b.HasKey("Key")
                        .HasName("ride_review_categories_pk");

                    b.ToTable("ride_review_categories");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideReviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("PointsGiven")
                        .HasColumnName("points_given")
                        .HasColumnType("integer");

                    b.Property<string>("Review")
                        .HasColumnName("review")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.Property<int[]>("TagList")
                        .HasColumnName("tag_list")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("ride_reviews");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Rides", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("ActualPrice")
                        .HasColumnName("actual_price")
                        .HasColumnType("numeric");

                    b.Property<string>("AdditionalPaymentTransaction")
                        .HasColumnName("additional_payment_transaction")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnName("approved_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApprovedNote")
                        .HasColumnName("approved_note")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("ApprovedUserId")
                        .HasColumnName("approved_user_id")
                        .HasColumnType("integer");

                    b.Property<int?>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ChargedPrice")
                        .HasColumnName("charged_price")
                        .HasColumnType("numeric");

                    b.Property<int?>("CreditCardId")
                        .HasColumnName("credit_card_id")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<int?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("integer");

                    b.Property<long?>("EndMileage")
                        .HasColumnName("end_mileage")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GeofenceGroup")
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsApproved")
                        .HasColumnName("is_approved")
                        .HasColumnType("boolean");

                    b.Property<string>("LastRidePoint")
                        .HasColumnName("last_ride_point")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string[]>("MapData")
                        .HasColumnName("map_data")
                        .HasColumnType("text[]");

                    b.Property<string>("PaymentServicePaymentToken")
                        .HasColumnName("payment_service_payment_token")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentServiceTransactionId")
                        .HasColumnName("payment_service_transaction_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("PaymentSuccessful")
                        .HasColumnName("payment_successful")
                        .HasColumnType("boolean");

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProvisionTransaction")
                        .HasColumnName("provision_transaction")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ReservationId")
                        .HasColumnName("reservation_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("ReservationPrice")
                        .HasColumnName("reservation_price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool?>("RideRefundedByMileage")
                        .HasColumnName("ride_refunded_by_mileage")
                        .HasColumnType("boolean");

                    b.Property<int?>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.Property<long?>("StartMileage")
                        .HasColumnName("start_mileage")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("total_price")
                        .HasColumnType("numeric")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("rides_customer_id_idx");

                    b.HasIndex("GeofenceGroup")
                        .HasName("rides_geofence_group_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("\"CustomerRideHistory\"_\"ID\"_uindex");

                    b.HasIndex("Photo")
                        .HasName("rides_photo_idx");

                    b.HasIndex("ScooterId")
                        .HasName("rides_scooter_id_idx");

                    b.HasIndex("StartTime")
                        .HasName("rides_start_time_idx");

                    b.ToTable("rides");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RidesOverFiveMins", b =>
                {
                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsFixed")
                        .HasColumnName("is_fixed")
                        .HasColumnType("boolean");

                    b.Property<long>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("bigint");

                    b.ToTable("rides_over_five_mins");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RidingPaymentErrors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CreditCardId")
                        .HasColumnName("credit_card_id")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ErrorTime")
                        .HasColumnName("error_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsFixed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_fixed")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RideId")
                        .HasColumnName("ride_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("riding_payment_errors");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RoleRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityKey")
                        .HasColumnName("security_key")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("value")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("role_rights_id_uindex");

                    b.ToTable("role_rights");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_system_role")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("roles_id_uindex");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterAlertDetail", b =>
                {
                    b.Property<bool>("GpsError")
                        .HasColumnName("gps_error")
                        .HasColumnType("boolean");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsFixed")
                        .HasColumnName("is_fixed")
                        .HasColumnType("boolean");

                    b.Property<long>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.ToTable("scooter_alert_detail");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterBodies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<int>("ScooterBodyVersionId")
                        .HasColumnName("scooter_body_version_id")
                        .HasColumnType("integer");

                    b.Property<long>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("scooter_bodies");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterBodyHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BatteryId")
                        .HasColumnName("battery_id")
                        .HasColumnType("integer");

                    b.Property<int?>("BodyId")
                        .HasColumnName("body_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<int?>("MotorDriverId")
                        .HasColumnName("motor_driver_id")
                        .HasColumnType("integer");

                    b.Property<int?>("MotorId")
                        .HasColumnName("motor_id")
                        .HasColumnType("integer");

                    b.Property<int>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BodyId")
                        .HasName("scooter_body_history_body_id_idx");

                    b.HasIndex("CreatedAt")
                        .HasName("scooter_body_history_created_at_idx");

                    b.HasIndex("ScooterId")
                        .HasName("scooter_body_history_scooter_id_idx2");

                    b.HasIndex("ScooterId", "BodyId")
                        .HasName("scooter_body_history_scooter_id_idx");

                    b.ToTable("scooter_body_history");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterBodyVersions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("scooter_body_versions");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterErrorMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Priority")
                        .HasColumnName("priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Ts")
                        .HasColumnName("ts")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("scooter_error_messages_code_idx");

                    b.HasIndex("Ts")
                        .HasName("scooter_error_messages_ts_idx");

                    b.ToTable("scooter_error_messages");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterErrors", b =>
                {
                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int?>("ErrorCode")
                        .HasColumnName("error_code")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Ts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ts")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.ToTable("scooter_errors");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterErrorsBacklog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Priority")
                        .HasColumnName("priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Ts")
                        .HasColumnName("ts")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("scooter_errors_backlog_code_idx");

                    b.ToTable("scooter_errors_backlog");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterLockCodeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScooterId")
                        .HasName("scooter_lock_code_history_scooter_id_idx");

                    b.ToTable("scooter_lock_code_history");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterPrices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GeofenceGroup")
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer");

                    b.Property<decimal?>("RecurringPrice")
                        .HasColumnName("recurring_price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("ReservationPrice")
                        .HasColumnName("reservation_price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("ScooterBodyVersionId")
                        .HasColumnName("scooter_body_version_id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("StartingPrice")
                        .HasColumnName("starting_price")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.ToTable("scooter_prices");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterRepairCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GroupName")
                        .HasColumnName("group_name")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<int[]>("ResultCodes")
                        .HasColumnName("result_codes")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("scooter_repair_categories_id_uindex");

                    b.ToTable("scooter_repair_categories");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterRepairLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RepairLogId")
                        .HasColumnName("repair_log_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ScooterRepairCategoryId")
                        .HasColumnName("scooter_repair_category_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ScooterRepairResultCategoryId")
                        .HasColumnName("scooter_repair_result_category_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ScooterRepairTypeId")
                        .HasColumnName("scooter_repair_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("scooter_repair_logs_id_uindex");

                    b.ToTable("scooter_repair_logs");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterRepairRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnName("close_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CloseUser")
                        .HasColumnName("close_user")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedUser")
                        .HasColumnName("created_user")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCanceled")
                        .HasColumnName("is_canceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChecked")
                        .HasColumnName("is_checked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFixed")
                        .HasColumnName("is_fixed")
                        .HasColumnType("boolean");

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("character varying");

                    b.Property<int>("RepairCategoryId")
                        .HasColumnName("repair_category_id")
                        .HasColumnType("integer");

                    b.Property<string>("RepairNote")
                        .IsRequired()
                        .HasColumnName("repair_note")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RepairResultCategoryId")
                        .HasColumnName("repair_result_category_id")
                        .HasColumnType("integer");

                    b.Property<int>("RepairTypeId")
                        .HasColumnName("repair_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RepairUserId")
                        .HasColumnName("repair_user_id")
                        .HasColumnType("integer");

                    b.Property<int>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("integer");

                    b.Property<int?>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasName("scooter_repair_records_created_date_idx");

                    b.HasIndex("IsFixed")
                        .HasName("scooter_repair_records_is_fixed_idx");

                    b.HasIndex("ScooterId")
                        .HasName("scooter_repair_records_scooter_id_idx");

                    b.ToTable("scooter_repair_records");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterRepairResultCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<int?>("ResultCode")
                        .HasColumnName("result_code")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("scooter_repair_result_categories");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterRepairTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("scooter_repair_types");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GroupName")
                        .HasColumnName("group_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("OrderNo")
                        .HasColumnName("order_no")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("\"ScooterStatus\"_\"ID\"_uindex");

                    b.ToTable("scooter_status");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterSubstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("OrderNo")
                        .HasColumnName("order_no")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("scooter_substatus");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterUnavailableReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("scooter_unavailable_reasons");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterUpdateLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ErrorCount")
                        .HasColumnName("error_count")
                        .HasColumnType("integer");

                    b.Property<int>("OkCount")
                        .HasColumnName("ok_count")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Ts")
                        .HasColumnName("ts")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("scooter_update_log");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterVersions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CurrentFirmwareVersion")
                        .HasColumnName("current_firmware_version")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("table_name_id_uindex");

                    b.ToTable("scooter_versions");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Scooters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Attention")
                        .HasColumnName("attention")
                        .HasColumnType("boolean");

                    b.Property<int?>("BatteryStatus")
                        .HasColumnName("battery_status")
                        .HasColumnType("integer");

                    b.Property<string>("BtMac")
                        .HasColumnName("bt_mac")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("ChargingStationId")
                        .HasColumnName("charging_station_id")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("FirmwareVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("firmware_version")
                        .HasColumnType("character varying(25)")
                        .HasDefaultValueSql("0")
                        .HasMaxLength(25);

                    b.Property<int>("GeofenceGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("10");

                    b.Property<bool?>("GsmAvailable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gsm_available")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("GsmLocation")
                        .HasColumnName("gsm_location")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<float>("Hdop")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hdop")
                        .HasColumnType("real")
                        .HasDefaultValueSql("4.0");

                    b.Property<bool>("IotLocked")
                        .HasColumnName("iot_locked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAvailable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_available")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("LastFotaTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_fota_time")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LastKnownPoint")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_known_point")
                        .HasColumnType("character varying(16)")
                        .HasDefaultValueSql("'sxk9hu93p'::character varying")
                        .HasMaxLength(16);

                    b.Property<DateTime?>("LastLockedTime")
                        .HasColumnName("last_locked_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LastRideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_ride_id")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("LastStolenTime")
                        .HasColumnName("last_stolen_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastUpdateTime")
                        .HasColumnName("last_update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Life")
                        .HasColumnName("life")
                        .HasColumnType("integer");

                    b.Property<string>("LockCode")
                        .HasColumnName("lock_code")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnName("mobile_phone_number")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("ModuleBatteryStatus")
                        .HasColumnName("module_battery_status")
                        .HasColumnType("integer");

                    b.Property<string>("MqttPassword")
                        .HasColumnName("mqtt_password")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("NeedRepair")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("need_repair")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("NeedRepairNote")
                        .HasColumnName("need_repair_note")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("RecurringPrice")
                        .HasColumnName("recurring_price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("ReservationPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reservation_price")
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValueSql("0.05");

                    b.Property<int?>("ScooterBodyVersionId")
                        .HasColumnName("scooter_body_version_id")
                        .HasColumnType("integer");

                    b.Property<string>("SimCardNo")
                        .HasColumnName("sim_card_no")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("StartingPrice")
                        .HasColumnName("starting_price")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("integer");

                    b.Property<long?>("SubStatus")
                        .HasColumnName("sub_status")
                        .HasColumnType("bigint");

                    b.Property<int>("Timezone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timezone")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("3");

                    b.Property<long?>("TotalKm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("total_km")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("0");

                    b.Property<int>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("scooters_code_idx");

                    b.HasIndex("GeofenceGroup")
                        .HasName("scooters_geofence_id_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("Scooters_\"ID\"_uindex");

                    b.HasIndex("StatusId")
                        .HasName("scooters_status_id2_idx");

                    b.HasIndex("StatusId", "GeofenceGroup")
                        .HasName("scooters_status_id3_idx");

                    b.HasIndex("StatusId", "Version")
                        .HasName("scooters_status_id_idx");

                    b.HasIndex("StatusId", "Version", "IsAvailable")
                        .HasName("scooters_status_id5_idx");

                    b.ToTable("scooters");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.SecurityRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasName("security_rights_key_uindex");

                    b.ToTable("security_rights");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.SwappableBatteryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<int?>("Order")
                        .HasColumnName("order_")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("swappable_battery_status");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BatteryId")
                        .HasColumnName("battery_id")
                        .HasColumnType("integer");

                    b.Property<int?>("BlockedBy")
                        .HasColumnName("blocked_by")
                        .HasColumnType("integer");

                    b.Property<string>("BlockedReason")
                        .HasColumnName("blocked_reason")
                        .HasColumnType("character varying");

                    b.Property<int?>("CancelledBy")
                        .HasColumnName("cancelled_by")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Priority")
                        .HasColumnName("priority")
                        .HasColumnType("integer");

                    b.Property<int?>("ScooterId")
                        .HasColumnName("scooter_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskCount")
                        .HasColumnName("task_count")
                        .HasColumnType("integer");

                    b.Property<string>("TaskLocation")
                        .HasColumnName("task_location")
                        .HasColumnType("character varying");

                    b.Property<int?>("TaskOwner")
                        .HasColumnName("task_owner")
                        .HasColumnType("integer");

                    b.Property<int>("TaskType")
                        .HasColumnName("task_type")
                        .HasColumnType("integer");

                    b.Property<string>("ToLocation")
                        .HasColumnName("to_location")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnName("valid_until")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TaskType", "Status")
                        .HasName("tasks_task_type_idx");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.TaxOffices", b =>
                {
                    b.Property<int?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.ToTable("tax_offices");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserActionReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnName("action_type")
                        .HasColumnType("character varying");

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("user_action_reasons");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserBreaks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BreakReasonId")
                        .HasColumnName("break_reason_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OtherText")
                        .HasColumnName("other_text")
                        .HasColumnType("character varying");

                    b.Property<int>("ShiftNo")
                        .HasColumnName("shift_no")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user_breaks");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserGeofences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GeofenceGroup")
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("user_geofences_id_uindex");

                    b.ToTable("user_geofences");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_logins");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("RightId")
                        .HasColumnName("right_id")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user_rights");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserShifts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CarId")
                        .HasColumnName("car_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FenceGroup")
                        .HasColumnName("fence_group")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnName("shift_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShiftNo")
                        .HasColumnName("shift_no")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseId")
                        .HasColumnName("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user_shifts");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserTokens", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessToken")
                        .HasColumnName("access_token")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("AgentId")
                        .HasColumnName("agent_id")
                        .HasColumnType("character varying");

                    b.Property<int[]>("ClaimIds")
                        .HasColumnName("claim_ids")
                        .HasColumnType("integer[]");

                    b.Property<bool?>("ControlcenterLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("controlcenter_login")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int[]>("GeofenceIdList")
                        .HasColumnName("geofence_id_list")
                        .HasColumnType("integer[]");

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("LastSignedInAt")
                        .HasColumnName("last_signed_in_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("mobile_phone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OneSignalId")
                        .HasColumnName("one_signal_id")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OtpToken")
                        .HasColumnName("otp_token")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccessToken")
                        .HasName("users_access_token_idx");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("users_id_uindex");

                    b.ToTable("users");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Warehouses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarId")
                        .HasColumnName("car_id")
                        .HasColumnType("integer");

                    b.Property<int?>("GeofenceGroup")
                        .HasColumnName("geofence_group")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("boolean");

                    b.Property<string>("WarehouseName")
                        .HasColumnName("warehouse_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("warehouses");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.WorkOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CarId")
                        .HasColumnName("car_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnName("completed_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CompletedUserId")
                        .HasColumnName("completed_user_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<bool?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_completed")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int[]>("Personel")
                        .HasColumnName("personel")
                        .HasColumnType("integer[]");

                    b.Property<int?>("PersonelId")
                        .HasColumnName("personel_id")
                        .HasColumnType("integer");

                    b.Property<int[]>("Regions")
                        .HasColumnName("regions")
                        .HasColumnType("integer[]");

                    b.Property<int?>("Total")
                        .HasColumnName("total")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("work_orders_id_uindex");

                    b.HasIndex("Personel")
                        .HasName("idx_personel")
                        .HasAnnotation("Npgsql:IndexMethod", "gin");

                    b.HasIndex("CompletedDate", "Date", "CarId", "PersonelId")
                        .HasName("find_work_order_idx");

                    b.ToTable("work_orders");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Zones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_enabled")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ScooterCount")
                        .HasColumnName("scooter_count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("zones_id_uindex");

                    b.HasIndex("RegionId")
                        .HasName("zones_region_id_idx");

                    b.HasIndex("IsEnabled", "RegionId")
                        .HasName("regions_is_enabled");

                    b.ToTable("zones");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Decisions", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.Decisions", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("decisions_fk");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Reservations", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.Customers", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("reservations_fk")
                        .IsRequired();

                    b.HasOne("R.ARC.Core.Entity.Models.Scooters", "Scooter")
                        .WithMany("Reservations")
                        .HasForeignKey("ScooterId")
                        .HasConstraintName("reservations_fk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RideRefundRequestHistory", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.RideRefunds", "Refund")
                        .WithMany("RideRefundRequestHistory")
                        .HasForeignKey("RefundId")
                        .HasConstraintName("ride_refund_request_history_refund_fk");

                    b.HasOne("R.ARC.Core.Entity.Models.RideRefundRequests", "Request")
                        .WithMany("RideRefundRequestHistory")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("ride_refund_request_history_fk")
                        .IsRequired();

                    b.HasOne("R.ARC.Core.Entity.Models.Users", "User")
                        .WithMany("RideRefundRequestHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ride_refund_request_history_user_fk")
                        .IsRequired();
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.Rides", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.Customers", "Customer")
                        .WithMany("Rides")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("rides_customers_fk");

                    b.HasOne("R.ARC.Core.Entity.Models.Scooters", "Scooter")
                        .WithMany("Rides")
                        .HasForeignKey("ScooterId")
                        .HasConstraintName("rides_scooters_fk");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.RoleClaims", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.Roles", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.ScooterSubstatus", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.ScooterStatus", "Status")
                        .WithMany("ScooterSubstatus")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("scooter_substatus_fk");
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserClaims", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.Users", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserLogins", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.Users", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserRoles", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R.ARC.Core.Entity.Models.Users", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("R.ARC.Core.Entity.Models.UserTokens", b =>
                {
                    b.HasOne("R.ARC.Core.Entity.Models.Users", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
